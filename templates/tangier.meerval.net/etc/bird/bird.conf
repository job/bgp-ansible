{% include 'ipv4.j2' %}

filter ntt_out
{
    if proto = "blackhole1" then {
        if (net.len = 32) then {
            # selective blackhole - discard outside country
            bgp_community.add((2914,664));
            accept;
        }
    }

{% if bgp['drain_mode'] %}
    send_graceful_shutdown();
{% endif %}

    # own space
    if ( net = 165.254.255.0/26 ) then {
        accept;
    }

    # Home
    if ( net = 192.147.168.0/24 ) then {
        bgp_community.add((65535, 0));
        bgp_large_community.add((15562,1,1));
        accept;
    }

    if (net = 165.254.255.132/32) then {
        bgp_community.add((2914, 450));
        bgp_community.add((65535, 65281));
        bgp_path.prepend(15562);
        bgp_med = 9999;
        accept;
    }

    # beacon

    if net = 209.24.2.0/24 then {
        bgp_path.empty;
        bgp_path.prepend(8952);
        bgp_path.prepend(15562);
        accept;
     }

    # bgp decoration
    if net ~ [ 209.24.0.0/16+ ] then {
        accept;
    }

    # ATR
    if net = 67.221.245.0/24 then {
        if is_downstream(myself) then accept;
    }

    # downstream routes
    if is_downstream(downstream) then accept;

    reject;
}

filter AS12654_import
prefix set AS12654;
int set AS12654_origins;
{
{% if bgp['drain_mode'] %}
    send_graceful_shutdown();
{% endif %}
    include "filters/AS12654.ipv4.conf";
    include "filters/AS12654.origins.conf";
    reject_long_aspaths();
    reject_transit_paths();
    reject_bogon_asns();
    reject_bogon_prefixes();
    reject_rpki_invalid();
    if !(bgp_path.last ~ AS12654_origins) then {
        print "AS12654_import() protocol ", proto, " Origin AS ", bgp_path.last, " not in IRR AS12654: ", net, " path: ", bgp_path;
        reject;
    }
    if (net ~ AS12654) then {
        bgp_large_community.add((15562,0,1));
        accept;
    }
    print "AS12654_import() protocol ", proto, " prefix not in IRR AS12654: ", net, " path: ", bgp_path;
    reject;
}

filter AS43997_import
prefix set AS43997;
int set AS43997_origins;
{
{% if bgp['drain_mode'] %}
    send_graceful_shutdown();
{% endif %}
    include "filters/AS43997.ipv4.conf";
    include "filters/AS43997.origins.conf";
    reject_long_aspaths();
    reject_transit_paths();
    reject_bogon_asns();
    reject_bogon_prefixes();
    reject_rpki_invalid();
    if !(bgp_path.last ~ AS43997_origins) then {
        print "AS43997_import() protocol ", proto, " Origin AS ", bgp_path.last, " not in IRR AS43997: ", net, " path: ", bgp_path;
        reject;
    }
    if (net ~ AS43997) then {
        bgp_large_community.add((15562,0,1));
        accept;
    }
    print "AS43997_import() protocol ", proto, " prefix not in IRR AS43997: ", net, " path: ", bgp_path;
    reject;
}

filter AS57782_import
prefix set AS57782;
int set AS57782_origins;
{
{% if bgp['drain_mode'] %}
    send_graceful_shutdown();
{% endif %}
    include "filters/AS57782.ipv4.conf";
    include "filters/AS57782.origins.conf";
    reject_long_aspaths();
    reject_transit_paths();
    reject_bogon_asns();
    reject_bogon_prefixes();
    reject_rpki_invalid();
    if !(bgp_path.last ~ AS57782_origins) then {
        print "AS57782_import() protocol ", proto, " Origin AS ", bgp_path.last, " not in IRR AS57782: ", net, " path: ", bgp_path;
        reject;
    }
    if (net ~ AS57782) then {
        bgp_large_community.add((15562,0,1));
        accept;
    }
    print "AS57782_import() protocol ", proto, " prefix not in IRR AS57782: ", net, " path: ", bgp_path;
    reject;
}
