function reject_long_aspaths()
{
    if (bgp_path.len > 100) then {
            print "reject_long_aspath(): ", net, " path: ", bgp_path;
            reject;
    }
}

function reject_bogon_asns()
int set bogon_asns;
{
    bogon_asns = [ 	0,                      # RFC 7607
        23456,                  # RFC 4893 AS_TRANS
        64496..64511,           # RFC 5398 and documentation/example ASNs
        64512..65534,           # RFC 6996 Private ASNs
        65535,                  # RFC 6996 Last 16 bit ASN
        65536..65551,           # RFC 5398 and documentation/example ASNs
        65552..131071,          # RFC IANA reserved ASNs
        4200000000..4294967294, # RFC 6996 Private ASNs
        4294967295 ];           # RFC 6996 Last 32 bit ASN
        if ( bgp_path ~ bogon_asns ) then {
            print "reject_bogon_asns()  bogon asn in path: ", net, " path: ", bgp_path;
            reject;
        }
    return true;
}

function is_downstream(int context)
{
    case (context) {
        # if originates with my own servers
        0: if (bgp_path.last = 15562 &&
               (15562, 0, 1) ~ bgp_large_community) then {
                return true;
            }
        # if originates with downstream ASNs
        1: if ((15562, 0, 1) ~ bgp_large_community) then {
                return true;
            }
        else: return false;
    }
    return false;
}

function scrub_communities(int context)
{
    # 0 = trusted
    # 1 = downstream
    # rest = untrusted
    case (context) {
        0: 
            bgp_large_community.delete([(15562, *, *)]);
            bgp_community.delete([(15562, *)]);
        1:
            bgp_large_community.delete([(15562, *, *)]);
            bgp_community.delete([(15562, *)]);
        else:
            bgp_community.delete([(65535, 666)]);
            bgp_large_community.delete([(15562, *, *)]);
            bgp_community.delete([(15562, *)]);
    }
}

function honor_graceful_shutdown()
{
   if (65535, 0) ~ bgp_community then {
	   bgp_local_pref = 0;
   }
}

function send_graceful_shutdown()
{
   bgp_community.add((65535, 0));
   bgp_local_pref = 0;
   preference = 0;
}

filter ntt_in
{
    reject_long_aspaths();
    reject_bogon_prefixes();
    scrub_communities(untrusted);
{% if afi == 4 %}
{# make sure we don't accept this prefix from the scrubber #}
    if net = 165.254.255.132/32 then reject;
{% endif %}
    bgp_med = 0;
    honor_graceful_shutdown();
{% if bgp['drain_mode']|default(False) %}
    send_graceful_shutdown();
{% endif %}
    reject_rpki_invalid();
    accept;
}

